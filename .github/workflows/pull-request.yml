name: Pull Request Checks

on:
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test

  status-comment:
    name: Status Comment
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: success()
    steps:
      - name: Add PR comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            
            const message = `
            ## âœ… PR Checks Status: Success
            
            All checks have passed successfully!
            
            - Lint: ${{ needs.lint.result }}
            - Tests: ${{ needs.test.result }}
            
            *Workflow run completed at ${new Date().toISOString()}*
            `;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('PR Checks Status');
            });
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: botComment.id,
                body: message
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: message
              });
            } 