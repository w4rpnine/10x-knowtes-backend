import type { SupabaseClient } from "../../db/supabase.client";
import { AIService } from "./ai.service";
import { DEFAULT_USER_ID } from "../../db/supabase.client";

export class SummaryService {
  private aiService: AIService;

  constructor(
    private readonly supabase: SupabaseClient,
    aiService?: AIService
  ) {
    this.aiService = aiService || new AIService("OPENROUTER_API_KEY");
  }

  /**
   * Generates a summary for notes in a topic
   * @throws Error if topic doesn't exist, user doesn't have access, or no notes to summarize
   */
  async generateSummary(
    _userId: string,
    topicId: string
  ): Promise<{ summary_stat_id: string; title: string; content: string }> {
    // Using DEFAULT_USER_ID for development/testing
    const userId = DEFAULT_USER_ID;

    // 1. Check if topic exists and belongs to user
    const { data: topic, error: topicError } = await this.supabase
      .from("topics")
      .select("id")
      .eq("id", topicId)
      .eq("user_id", userId)
      .single();

    if (topicError || !topic) {
      throw new Error(topicError?.message || "Topic not found or access denied");
    }

    // 2. Get notes to summarize (excluding existing summaries)
    const { data: notes, error: notesError } = await this.supabase
      .from("notes")
      .select("*")
      .eq("topic_id", topicId)
      .eq("is_summary", false);

    if (notesError) {
      throw new Error(`Failed to fetch notes: ${notesError.message}`);
    }

    if (!notes?.length) {
      throw new Error("No notes found to summarize");
    }

    // 3. Create summary_stats record
    const { data: summaryStat, error: summaryStatError } = await this.supabase
      .from("summary_stats")
      .insert({
        topic_id: topicId,
        user_id: userId,
        accepted: false,
      })
      .select()
      .single();

    if (summaryStatError || !summaryStat) {
      throw new Error(`Failed to create summary stat: ${summaryStatError?.message}`);
    }

    // 4. Return mocked summary response
    return {
      summary_stat_id: summaryStat.id,
      title: "[Mock] Summary of Your Notes",
      content:
        "This is a mock summary of your notes. In the actual implementation, this will be generated by AI based on your notes content.",
    };
  }
}
